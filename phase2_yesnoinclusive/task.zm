/******************************************************************************\
FILE:           task.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     Jan de Mooij <A.J.deMooij@uu.nl>

DESCRIPTION:

Implementation of task: Auditory Identification with Yes-No Response
See readme.txt for more information.


Global structure of this experiment phase:

  - instructions

  - practice part
      trial

  - pause

  - test part
      trial


HISTORY:
2012-01-30 TV   Created.
2016-03-03 AJM  Adapted

\******************************************************************************/

//requires 1.10;

import defs;
import stimuli;
import shuffle;
import output;
import test_page;


Block task
{
    on_event:entry()
    {
    }


    Part instructions
    {
        on_event:entry()
        {
            load_practice_items();
            load_stimuli();
            
            pause_page.set_text(YESNOINCLUSIVE_INSTRUCTIONS, true);
            pause_page.action(this);
        }
    }


    Block practice
    {
        TestItem        item;   // current item

        on_event:entry()
        {
            num_cycles = prac_items.size;
            
            // Prepare test page: progress bar and prompt enabled.
            test_page.setup(num_cycles, true);
        }


        on_event:exit()
        {
            test_page.cleanup();
        }


        Trial trial
        {
            on_event:entry()
            {
                item = prac_items[practice.cycle];
                test_page.action(this, item, reference_time, practice.cycle);
            }
        }
    }


    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }


    Part pause
    {
        on_event:entry()
        {
            control.button_box.disable_buttons();
            control.button_box.enable_button(1,0);
            pause_page.set_text(YESNOINCLUSIVE_END_OF_PRACTICE, true);
            pause_page.action(this);
        }
    }


    Block test
    {
        TestItem        item;   // current item


        on_event:entry()
        {
            // Randomize test items table.
            if (shuffle_test_items() != OK) terminate;

            num_cycles = test_items.size;
//            num_cycles = 3;

            // Prepare test page: progress bar enabled, prompt disabled.
            test_page.setup(num_cycles, false);
        }


        on_event:exit()
        {
            test_page.cleanup();

            // Save test output table as CSV file.
            test_output_save();
        }


        Trial trial
        {
            on_event:entry()
            {
                item = test_items[test.cycle];

                test_page.action(this, item, reference_time, test.cycle);
            }


            on_event:exit()
            {
                // Add new row to test output table.
                TestOutput output;
                
                output.trialnum             = test.cycle + 1;
                output.id                   = item.id;
                output.type                 = item.type;
                output.expected_answer      = item.expected_answer;
                output.sndfn                = item.sndfn;
                output.value                = test_page.response.value;
                output.correct              = test_page.response.correct;
                output.rt                   = test_page.response.rt;

                test_output_append(output);
            }
        }
    }


    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }
}


void action(Part caller)
{
    // Activate the task. When the task is done, the registered caller
    // (c.q. the main experiment object) will automatically be signalled.
    task.enter(caller);
}
