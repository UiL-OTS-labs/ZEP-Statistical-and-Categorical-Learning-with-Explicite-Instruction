/******************************************************************************\
FILE:           statcatlearning.zp
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     Jan de Mooij <A.J.deMooij@uu.nl> 03-03-2016

DESCRIPTION:

Implementation of task: Statistical and Categorical Learning with Explicit Instruction

For more information on the statcatlearning.zp task see readme.md in the 
test folder.


Global structure of experiment:

  - welcome

  - Exposure (120 words; implicit instruction group only)

  - Explenation of grammar (audio/video; explicit group only)

  - Break

  - phase 1: Yes-no-inclusive (see subfolder test1)

  - phase 2: AX discrimination (see subfolder test2)

  - thankyou


HISTORY:
2013-07-03 TV   Created.
2016-03-03 AJM  Adapted for Yes-no-inclusive and AX discrimination

\******************************************************************************/

requires 1.12;

import std_windows1;
// import std_texts_en;
import std_entry_page1;
import std_exit_page1;
import std_pause_page;
import std_blank_page;
import texts_nl;

import phase_exposure::task;
import phase_yesnoinclusive::task;
import phase_axdiscrimination::task;

Experiment experiment
{
    on_event:entry()
    {
        show_test_windows();
        control.button_box.open();
    }


    on_event:message()
    {
        // On Ctrl+F4 jump unconditionally to the thank-you part.
        if (message_sender == control && message_arg == SYS_STOP)
        {
            control.mark_experiment_aborted();
            thankyou.enter();
        }
    }


    Part welcome
    {
        on_event:entry()
        {
            entry_page.set_text(WELCOME_TEXT);
            entry_page.action(this, 0s);
        }
    }

    Part exposure
    {
        on_event:entry()
        {
            phase_exposure::action(this);
        }
    }

    Part phase1
    {
        on_event:entry()
        {
            phase_yesnoinclusive::action(this);
        }
    }

    Part phase2
    {
        on_event:entry()
        {
            phase_axdiscrimination::action(this);
        }
    }


    Part thankyou
    {
        on_event:entry()
        {
            control.end_experiment();   // Check-in session.

            exit_page.set_text(THANK_YOU_TEXT);
            exit_page.action(this, 10s);
        }
    }
}
